#!/usr/bin/env node
'use strict';

const program = require('commander');
const log = require('../lib/log');
const run = require('../lib/exec');
const fs = require('fs');
const path = require('path');
const postInit = require('../lib/post_init');

program
  .option('-t, --template [value]', 'simple')
  .option('-u, --update', 'update an existing directory')
  .option('-s, --scope [value]', 'specify the npm scope')
  .option('--registry [value]', 'specify the npm registry')
  .parse(process.argv);

/**
 * hc-boilerplate-simple
 */
let template = program.template || 'simple';
let scope = program.scope || '';
let registry = program.registry;
let dir = program.args[0] || '.';

if (!program.update && fs.existsSync(dir)) {
  let content = fs.readdirSync(dir);

  if (content.length) {
    console.error(`path '${dir}' already exists and is not an empty directory`);
    process.exit(1);
  }
}
if (scope && !scope.startsWith('@')) {
  scope = '@' + scope;
}
if (!registry) {
  const jsonPath = path.join(process.env.HOME, '.honeycomb.json');

  if (fs.existsSync(jsonPath)) {
    try {
      registry = require(jsonPath).registry;
    } catch (e) {
      // do nothing
    }
  }

  if (!registry) {
    registry = 'https://registry.npmjs.org/';
  }
}

/**
 * npm pack will download a tarball
 * tar -k will skip exist files
 * --strip-components 1 will remove a leading path
 */
try {
  run(`sh -c '\
    tar=$(npm pack ${scope ? scope + '/' : ''}hc-boilerplate-${template} --registry ${registry});\
    [ -z $tar ] && exit 1;\
    echo downloaded $tar;\
    mkdir -p ${dir};\
    tar -xzkf $tar --strip-components 1 -C ${dir};\
    rm $tar;'
  `);
} catch (e) {
  if (e.status === 1) {
    log.error(`package ${scope ? scope + '/' : ''}hc-boilerplate-${template} not exist`);
  } else {
    log.error(e.stack || e);
  }
  log.error('abort');
  process.exit(1);
}

postInit(dir);
log.info('init success');

process.exit(0);
